/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Introduction
============
This project allows external processes to be started from ACE by means of 
configurations. A typical use case would be to provision this bundle to an 
empty OSGi-container, push one or more configurations to it, which, in their 
turn, launch one or more processes.


Usage
=====
In its minimal form, the configuration that should be supplied to the service
factory with PID "org.apache.ace.processlauncher" is:

  executable.name = /path/to/executable
  executable.args = -arg1 -arg2=foo -arg3=/qux/quu

This configuration will cause a single instance of "executable" to be started,
with the arguments "-arg1 -arg2=foo -arg3=/qux/quu". If the process finished,
no new instance will be started.

A complete configuration looks like:

  # Denotes how many instances of the process should be started, >= 0.
  # Optional, defaults to 1.
  instance.count = 1
  # What working directory should the executable start in?
  # Optional. Defaults to the current working directory.
  executable.workingDir = /path/to/cwd
  # The executable to start, should be the fully qualified path to the
  # executable. Mandatory, no default.
  executable.name = /path/to/executable
  # The arguments for the executable. Mandatory, no default.
  executable.args = -arg1 -arg2
  # The OSGi-filter clause that should resolve to a ProcessStreamListener 
  # service-instance. When given, it will be used to provide access to the 
  # launched process' stdin/stdout streams. Optional, defaults to an empty/no 
  # filter.
  executable.processStreamListener = (&(objectClass=eu.luminis.technologies.MyStreamListener)(foo=bar))
  # The OSGi-filter clause that should resolve to a ProcessLifecycleListener
  # service-instance. When given, it will be used to provide hooks to when the
  # executable is (re)started and stopped. Option, defaults to an empty/no 
  # filter.
  executable.processLifecycleListener = (objectClass=eu.luminis.technologies.MyLifecycleListener)
  # When 'true' the process will automatically be restarted when it terminates
  # with a 'abnormal' exit value (see 'executable.normalExitValue'). Any
  # defined process stream listener will be re-invoked with the newly started
  # process.
  # Optional. Defaults to 'false'.
  executable.respawnAutomatically = false
  # Denotes what the 'normal' exit value of the process is, so the launcher can
  # determine when a process is terminated abnormally.
  # Optional. Defaults to 0.
  executable.normalExitValue = 0

While most of the configuration options are rather obvious, some of them are
explained in more detailed below.

executable.processStreamListener
--------------------------------
This option allows you to provide an OSGi-filter that should resolve to an 
instance of org.apache.ace.processlauncher.ProcessStreamListener. When given,
this process stream listener will be used to allow interaction with the 
launched process. With this, for example, you can start a Felix instance with
shell bundles and interact through shell commands. 

Note 1: that if you interact with processes this way, you need to ensure that 
the standard output of the process is consumed to avoid native buffers from 
filling up. If you do not care about the process' output, you can either let 
ProcessStreamListener#wantsStdout return 'false', or use an instance of 
org.apache.ace.processlauncher.util.InputStreamRedirector to consume it for 
you. See [1] for a typical example and background information.

Note 2: some processes only terminate when their standard input is closed or 
receives an EOF. This means that you need to close the standard input stream
of the process *explicitly* yourself, should you choose to interact with a
process.

executable.processLifecycleListener
-----------------------------------
This option allows you to provide an OSGi-filter that should resolve to an 
instance of org.apache.ace.processlauncher.ProcessLifecycleListener. When 
given, this lifecycle listener will be called right *before* a process instance
is started, and right *after* a process is terminated.

You can use this functionality to set up a proper environment for your to-be-
launched process, for example, by creating working directories, patching some
configuration files, and so on. It also allows you to adjust the environment
settings of the process, for example to let it point to a newly created 
temporary directory.

executable.normalExitValue & executable.respawnAutomatically
------------------------------------------------------------
These options can be used to monitor a process and automatically relaunch it 
when it suddenly terminates. Most of the times, a process uses an exit value 
of 0 to denote it terminated normally, i.e., without any errors. All non-zero
values thus can be interpreted as a signal that a process should be 
relaunched. 

When executable.respawnAutomatically is set to 'true', the process will be 
monitored whether it is still alive. If not, it will be restarted. Note that 
there can be a small delay between the termination of the process and the
relaunching of a new process instance.

instance.count
--------------
Allows you to start multiple instances of a single process. In combination with
the executable.processLifecycleListener, it allows you to create multiple
independent instances of a single process.

executable.args
---------------
This option allows you to supply optional arguments to the launched process. 
Internally, the string supplied to this option will be split on spaces to
obtain the individual arguments. If you have an argument (value) that contains
spaces, and you want to preserve this, you can escape it with a single 
backslash. For example:

  executable.args = -arg1 -arg2=foo bar

will be interpreted as *three* arguments: "-arg1", "-arg2=foo" and "bar". 
While:

  executable.args = -arg1 -arg2=foo\ bar

will be interpreted as *two* arguments: "-arg1" and "-arg2=foo bar".

executable.name
---------------
The path to the executable to start. The executable name must always be 
supplied with the full path, as there are no guarantees that the executable
will be found otherwise.


Resources
=========
1. http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html
